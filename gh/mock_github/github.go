// Code generated by MockGen. DO NOT EDIT.
// Source: github.go

// Package mock_gh is a generated GoMock package.
package mock_gh

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	reflect "reflect"
)

// MockGithub is a mock of Github interface
type MockGithub struct {
	ctrl     *gomock.Controller
	recorder *MockGithubMockRecorder
}

// MockGithubMockRecorder is the mock recorder for MockGithub
type MockGithubMockRecorder struct {
	mock *MockGithub
}

// NewMockGithub creates a new mock instance
func NewMockGithub(ctrl *gomock.Controller) *MockGithub {
	mock := &MockGithub{ctrl: ctrl}
	mock.recorder = &MockGithubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithub) EXPECT() *MockGithubMockRecorder {
	return m.recorder
}

// CompareCommits mocks base method
func (m *MockGithub) CompareCommits(ctx context.Context, owner, repo, base, head string) (*github.CommitsComparison, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareCommits", ctx, owner, repo, base, head)
	ret0, _ := ret[0].(*github.CommitsComparison)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareCommits indicates an expected call of CompareCommits
func (mr *MockGithubMockRecorder) CompareCommits(ctx, owner, repo, base, head interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareCommits", reflect.TypeOf((*MockGithub)(nil).CompareCommits), ctx, owner, repo, base, head)
}
