name: build
on:
  push:
    branches:
      - "*"
    tags:
      - "v*"

env:
  GO111MODULE: "on"
  PKG_CONFIG_PATH: /usr/local/lib/pkgconfig/
  LD_LIBRARY_PATH: /opt/oracle/instantclient

jobs:
  gox:
    name: gox

    strategy:
      fail-fast: false
      matrix:
        os:
          - darwin
          - freebsd
          - linux
          - netbsd
          - openbsd
          - windows
        arch:
          - amd64
          - arm
          - 386
        include:
          - os: darwin
            runner: macos-latest
          - os: freebsd
            runner: ubuntu-latest
          - os: linux
            runner: ubuntu-latest
          - os: netbsd
            runner: ubuntu-latest
          - os: openbsd
            runner: ubuntu-latest
          - os: windows
            runner: ubuntu-latest
        exclude:
          - os: darwin
            arch: arm
          - os: openbsd
            arch: arm
          - os: windows
            arch: arm

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: make package
        run: |
          set -xe
          export GOPATH=`go env GOPATH`
          export PATH=$GOPATH/bin:$PATH
          go get -u github.com/mitchellh/gox
          make clean gox_with_zip zip
        env:
          GOX_OSARCH: ${{ matrix.os }}/${{ matrix.arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: bin-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/
  release:
    name: Release

    needs:
      - gox

    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts from darwin-386
        uses: actions/download-artifact@v1
        with:
          name: bin-darwin-386
          path: bin/

      - name: Download artifacts from darwin-amd64
        uses: actions/download-artifact@v1
        with:
          name: bin-darwin-amd64
          path: bin/

      - name: Download artifacts from freebsd-386
        uses: actions/download-artifact@v1
        with:
          name: bin-freebsd-386
          path: bin/

      - name: Download artifacts from freebsd-amd64
        uses: actions/download-artifact@v1
        with:
          name: bin-freebsd-amd64
          path: bin/

      - name: Download artifacts from freebsd-arm
        uses: actions/download-artifact@v1
        with:
          name: bin-freebsd-arm
          path: bin/

      - name: Download artifacts from linux-386
        uses: actions/download-artifact@v1
        with:
          name: bin-linux-386
          path: bin/

      - name: Download artifacts from linux-amd64
        uses: actions/download-artifact@v1
        with:
          name: bin-linux-amd64
          path: bin/

      - name: Download artifacts from linux-arm
        uses: actions/download-artifact@v1
        with:
          name: bin-linux-arm
          path: bin/

      - name: Download artifacts from netbsd-amd64
        uses: actions/download-artifact@v1
        with:
          name: bin-netbsd-amd64
          path: bin/

      - name: Download artifacts from netbsd-arm
        uses: actions/download-artifact@v1
        with:
          name: bin-netbsd-arm
          path: bin/

      - name: Download artifacts from netbsd-386
        uses: actions/download-artifact@v1
        with:
          name: bin-netbsd-386
          path: bin/

      - name: Download artifacts from openbsd-386
        uses: actions/download-artifact@v1
        with:
          name: bin-openbsd-386
          path: bin/

      - name: Download artifacts from openbsd-amd64
        uses: actions/download-artifact@v1
        with:
          name: bin-openbsd-amd64
          path: bin/

      - name: Download artifacts from windows-amd64
        uses: actions/download-artifact@v1
        with:
          name: bin-windows-amd64
          path: bin/

      - name: Download artifacts from windows-386
        uses: actions/download-artifact@v1
        with:
          name: bin-windows-386
          path: bin/

      - name: Upload to GitHub Releases
        run: |
          set -xe
          export GOPATH=`go env GOPATH`
          export PATH=$GOPATH/bin:$PATH
          export PUSH_EVENT_REF=$(jq --raw-output .ref "$GITHUB_EVENT_PATH")
          if [ "$(echo $PUSH_EVENT_REF | grep refs/tags/ | wc -l)" = "0" ]; then
            echo "ref is not a tag: ${PUSH_EVENT_REF}"
            exit 1
          fi
          export TAGNAME=$(echo $PUSH_EVENT_REF | sed -e 's!refs/tags/!!g')
          export USERNAME=$(echo $GITHUB_REPOSITORY | cut -d / -f 1)
          export REPO=$(echo $GITHUB_REPOSITORY | cut -d / -f 2)
          go get -u github.com/tcnksm/ghr
          if [ "$(echo $TAGNAME | grep -E 'v[0-9.]+$' | wc -l)" = "0" ]; then
            GHR_OPTIONS="${GHR_OPTIONS} -prerelease"
          fi
          $GOPATH/bin/ghr -u ${USERNAME} -r ${REPO} -n ${TAGNAME} -b "Release ${TAGNAME}" ${GHR_OPTIONS} ${TAGNAME} bin/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith(github.ref, 'refs/tags/')

      # - name: Slack Notification
      #   uses: homoluctus/slatify@master
      #   if: always()
      #   with:
      #     job_name: '*release*'
      #     type: ${{ job.status }}
      #     icon_emoji: ":octocat:"
      #     url: ${{ secrets.SLACK_WEBHOOK }}
      #     token: ${{ secrets.GITHUB_TOKEN }}

# name: Release

# on:
#   push:
#     branches:
#       - "!**/*"
#     tags:
#       - "v*"

# env:
#   GO111MODULE: "on"

# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Set up Go
#         uses: actions/setup-go@v1
#         with:
#           go-version: 1.13
#         id: go
#       - name: make package and release
#         run: |
#           set -xe
#           export GOPATH=`go env GOPATH`
#           export PATH=$GOPATH/bin:$PATH
#           export PUSH_EVENT_REF=$(jq --raw-output .ref "$GITHUB_EVENT_PATH")
#           if [ "$(echo $PUSH_EVENT_REF | grep refs/tags/ | wc -l)" = "0" ]; then
#             echo "ref is not a tag: ${PUSH_EVENT_REF}"
#             exit 1
#           fi
#           export TAGNAME=$(echo $PUSH_EVENT_REF | sed -e 's!refs/tags/!!g')
#           go get -u github.com/mitchellh/gox
#           make gox_with_zip
#           go get -u github.com/tcnksm/ghr
#           $GOPATH/bin/ghr -n ${TAGNAME} -b "Release ${TAGNAME}" ${TAGNAME} bin/